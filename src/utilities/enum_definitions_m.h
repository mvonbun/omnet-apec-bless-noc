//
// Generated file, do not edit! Created by nedtool 5.0 from utilities/enum_definitions.msg.
//

#ifndef __ENUM_DEFINITIONS_M_H
#define __ENUM_DEFINITIONS_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>utilities/enum_definitions.msg:28</tt> by nedtool.
 * <pre>
 * //
 * // message types
 * // flit messge types can also be used as priorities (the higher the better)
 * //
 * enum MessageTypes
 * {
 * 
 *     EVENT = 0;  // base event
 *     TXEVENT = 1;  // event triggering transmission
 *     TIMEOUT = 2;  // timeout event
 *     ARBEVENT = 3;  // arbitration event
 *     RELEVENT = 4;  // resource release event
 *     PACKTRIG = 5;  // packet trigger message
 *     MONITOR = 6;  // message for the monitor
 *     FLIT = 20; // base flit (no event)
 *     HEAD = 30; // Packet Header
 *     HEADTAIL = 31; // One flit packet (head and tail)
 *     ACK = 40; // Acknowledgement message
 *     NACK = 45; // NAcknowledgement message
 *     CNACK = 46; // Combined Nack message
 *     DATA = 50; // Packet Data (Body or Tail)
 *     BODY = 51; // Packet Body
 *     TAIL = 52; // Packet Tail
 *     CTRL = 60; // Simulation control message
 *     CBUFOVFL = 61; // Pending buffer overflow
 *     CCONV = 62; // Convergence message
 * }
 * </pre>
 */
enum MessageTypes {
    EVENT = 0,
    TXEVENT = 1,
    TIMEOUT = 2,
    ARBEVENT = 3,
    RELEVENT = 4,
    PACKTRIG = 5,
    MONITOR = 6,
    FLIT = 20,
    HEAD = 30,
    HEADTAIL = 31,
    ACK = 40,
    NACK = 45,
    CNACK = 46,
    DATA = 50,
    BODY = 51,
    TAIL = 52,
    CTRL = 60,
    CBUFOVFL = 61,
    CCONV = 62
};

/**
 * Enum generated from <tt>utilities/enum_definitions.msg:53</tt> by nedtool.
 * <pre>
 * //
 * // scheduling priorities
 * //
 * enum SchedulingPriorities
 * {
 * 
 *     SP_FIRST = 10;
 *     SP_VERY_EARLY = 20;
 *     SP_EARLY = 30;
 *     SP_EARLIER = 40;
 *     SP_BASE = 50;
 *     SP_LATER = 60;
 *     SP_LATE = 70;
 *     SP_VERY_LATE = 80;
 *     SP_LAST = 90;
 * }
 * </pre>
 */
enum SchedulingPriorities {
    SP_FIRST = 10,
    SP_VERY_EARLY = 20,
    SP_EARLY = 30,
    SP_EARLIER = 40,
    SP_BASE = 50,
    SP_LATER = 60,
    SP_LATE = 70,
    SP_VERY_LATE = 80,
    SP_LAST = 90
};

/**
 * Enum generated from <tt>utilities/enum_definitions.msg:70</tt> by nedtool.
 * <pre>
 * //
 * // priorities
 * // (lower is better; see sorting compare routines of routers)
 * // maybe for future: increase prio at every cycle
 * //
 * enum PacketPriorities
 * {
 * 
 *     PRIO_PACKET_HIGHEST = 10;
 *     PRIO_PACKET_VERYHIGH = 20;
 *     PRIO_PACKET_HIGHER = 30;
 *     PRIO_PACKET_HIGH = 40;
 *     PRIO_PACKET_BASE = 50;
 *     PRIO_PACKET_LOW = 60;
 *     PRIO_PACKET_LOWER = 70;
 *     PRIO_PACKET_VERYLOW = 80;
 *     PRIO_PACKET_LOWEST = 90;
 * }
 * </pre>
 */
enum PacketPriorities {
    PRIO_PACKET_HIGHEST = 10,
    PRIO_PACKET_VERYHIGH = 20,
    PRIO_PACKET_HIGHER = 30,
    PRIO_PACKET_HIGH = 40,
    PRIO_PACKET_BASE = 50,
    PRIO_PACKET_LOW = 60,
    PRIO_PACKET_LOWER = 70,
    PRIO_PACKET_VERYLOW = 80,
    PRIO_PACKET_LOWEST = 90
};

/**
 * Enum generated from <tt>utilities/enum_definitions.msg:85</tt> by nedtool.
 * <pre>
 * //
 * // code types
 * //
 * enum CodeTypes
 * {
 * 
 *     UNCODED = 0;  // no code used
 *     CYCLIC = 10; // cyclic repetition code
 *     DYNAMIC = 20; // dynamic recovery
 *     HEUR = 30; // robustness against single collisions
 *     HEUR_S = 31; // robustness against single collisions
 *     HEUR_B = 32; // robustness against bursty collisions
 *     HEUR_J = 33; // joint robustness against single and bursty collisions
 *     FEC = 40; // optimal forward error correction (http://pages.cs.wisc.edu/~suman/courses/740/papers/rizzo97ccr.pdf)
 *     BLOCKX = 50; // blockwise single xor
 * }
 * </pre>
 */
enum CodeTypes {
    UNCODED = 0,
    CYCLIC = 10,
    DYNAMIC = 20,
    HEUR = 30,
    HEUR_S = 31,
    HEUR_B = 32,
    HEUR_J = 33,
    FEC = 40,
    BLOCKX = 50
};

/**
 * Enum generated from <tt>utilities/enum_definitions.msg:100</tt> by nedtool.
 * <pre>
 * //
 * // link release mechanism
 * //
 * enum ResourceReleaseTypes
 * {
 * 
 *     TAILFLAG = 0; // use tail flag
 *     FLITCOUNT = 1; // use flit counter
 * }
 * </pre>
 */
enum ResourceReleaseTypes {
    TAILFLAG = 0,
    FLITCOUNT = 1
};

/**
 * Enum generated from <tt>utilities/enum_definitions.msg:108</tt> by nedtool.
 * <pre>
 * //
 * // module type enumerations
 * //
 * enum ModuleTypes
 * {
 * 
 *     SOURCE = 0;
 *     ENCODER = 10;
 *     NI = 20;
 *     ROUTER = 30;
 *     DECODER = 40;
 *     SINK = 50;
 * }
 * </pre>
 */
enum ModuleTypes {
    SOURCE = 0,
    ENCODER = 10,
    NI = 20,
    ROUTER = 30,
    DECODER = 40,
    SINK = 50
};


#endif // ifndef __ENUM_DEFINITIONS_M_H

