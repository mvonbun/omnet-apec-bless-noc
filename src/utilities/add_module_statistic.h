// Omnet++ model of an apec bufferless noc.
// Copyright (C) 2019  by the author(s)
// 
// This program is free software: you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation, either version 3 of the License, or (at your option) any later
// version.
// 
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for mor
// details.
// 
// You should have received a copy of the GNU General Public License along with
// this program.  If not, see <https://www.gnu.org/licenses/>.
//
// File      : add_module_statistic.h
// Created   : 07 Jun 2017 for apec_bless_noc
// Author(s) : Michael Vonbun
// E-mail(s) : michael.vonbun@tum.de
// 

#ifndef UTILITIES_ADD_MODULE_STATISTIC_H_
#define UTILITIES_ADD_MODULE_STATISTIC_H_

#include <cstdio>
#include <omnetpp.h>
#include <string>

using namespace omnetpp;

/** @file */

namespace util
{

/** @fn simsignal_t addModuleStatistic(cSimpleModule* module, const char* signal)
 *  @brief Easy setup of per module statistics collection.
 *  @param module pointer to the simple module.
 *  @param signal name of the signal.
 *  @return id of the registered signal.
 *
 *  See [4.15.3 Statistics Recording for Dynamically Registered Signals] in the
 *  Omnet++ manual to understand, how signal based statistics recording on a
 *  per module basis is done.
 *
 *  However, to overcome code duplication, use this wrapper utility function to
 *  facilitate setting up the statistics recording.
 *
 *  To use the wrapper function, you have to add:
 *  - in your C++ initialize() method:
 *      signal = util::addModuleStatistic( ... ); // register signal
 *  - in your C++ at some point:
 *      emit(signal, data); // attach data to signal and emit it
 *  - in your NED file:
 *      @signal[wildcarded_signal_name](type=long);
 *      @statisticTemplate[ned_statistic_name](record=mean,count,vector?);
 *
 *  See usage examples for the function versions below.
 *
 */

/** Wrapper Implementation.
 *
 * @param module_ptr pointer to the module.
 * @param signal_name name of the signal.
 * @param statistic_name name of the statistic of the result recorder.
 * @param ned_name name to attach to in the ned statistic template.
 * @return id of the registered signal.
 *
 * Example:
 * Let mod be the module you want to add a statistic to. Then, add
 *
 * mod.h:
 * class mod : public cSimpleModule {
 * private:
 *  simsignal_t module_signal;
 * }
 *
 * mod.cc:
 * mod::initialize() {
 *       module_signal = addModuleStatistic(this, "my_signal_1", "my_stat_1",
 * "my_stat");
 * }
 *
 * mod::statistic() {
 *      emit(module_signal, data);
 * }
 *
 * mod.ned:
 *      @signal[my_stat_*](type=long);
 *      @statisticTemplate[my_stat](record=mean,count,vector?);
 */
simsignal_t addModuleStatistic(cSimpleModule *module_ptr,
                               const char *signal_name,
                               const char *statistic_name,
                               const char *ned_name);

/** Main wrapper interface.
 *
 * @param module_ptr pointer to the module.
 * @param prefix prefix for signal and statistic names.
 * @param module_id id to use in signal and statistic names.
 * @param postfix optional postfix for signal and statistic names.
 * @param ned_name optional name for the statistic template of the ned file. If
 * it is not provided, the combination of prefix and postfix is used.
 * @return id of the registered signal.
 *
 * Example:
 * Assume you want to record the packet lengths of all packets generated by your
 * sources.
 *
 * In source.h you therefore add the member
 *      simsignal_t length_signal;
 * to your class.
 *
 * In source.cc you register the signal in initialize() by
 *      source::initialize() {
 *          module_id = par("id").longValue();
 *          length_signal = util::addModuleStatistic(this, "pkgGen-", module_id,
 *                                                   "_length", "pkgGen_length");
 *      }
 *
 * In source.cc upon packet generation, you emit the signal by
 *      source::genPacket() {
 *          emit(length_signal, packet->getLength());
 *      }
 *
 * In source.ned you add the statistic collection by adding
 *          @signal[pkgGen-*_length](type=long);
 *          @statisticTemplate[pkgGen_length](record=mean,count,vector?);
 * to the parameters section of your module to record scalars mean and count by
 * default and vector output using all recording.
 *
 */
simsignal_t addModuleStatistic(cSimpleModule *module_ptr, const char *prefix,
                               const int module_id,
                               const char *postfix = nullptr,
                               const char *ned_name = nullptr);

} /* namespace */

#endif /* UTILITIES_ADD_MODULE_STATISTIC_H_ */
